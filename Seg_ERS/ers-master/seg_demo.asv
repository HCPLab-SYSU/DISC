%//
%// MATLAB wrapper for Entropy Rate Superpixel Segmentation
%//
%// This software is used to demo the entropy rate superpixel
%// segmentation algorithm (ERS). The detailed of the algorithm can be
%// found in 
%//
%//      Ming-Yu Liu, Oncel Tuzel, Srikumar Ramalingam, Rama Chellappa,
%//      "Entropy Rate Superpixel Segmentation", CVPR2011.
%//
%// Copyright 2011, Ming-Yu Liu <mingyliu@umiacs.umd.edu>
%
close all;clear all;clc
path_pre = 'F:\performance2\THUR\original\jpg\';
filename = textread('F:\performance2\THUR\original\THUR_total.list','%s');
 file_pre = 'F:\performance2\THUR\Superpixel\';
[filesize,~] = size(filename);
for index = 1:filesize
    disp('Entropy Rate Superpixel Segmentation Demo');
    index
    %%
    %//=======================================================================
    %// Input
    %//=======================================================================
    %// These images are duplicated from the Berkeley segmentation dataset,
    %// which can be access via the URL
    %// http://www.eecs.berkeley.edu/Research/Projects/CS/vision/bsds/
    %// We use them only for demonstration purposes.

    % img = imread('148089.jpg');
    img_size = 64;
    img_path = [path_pre, filename{index}];
    imgage = imread([img_path,'.jpg']);
    seg_label = imread([img_path,'.png']);
    img = imresize(imgage, [img_size,img_size]);
    seg_label = imresize(seg_label, [img_size,img_size]);

    %// Our implementation can take both color and grey scale images.
    [a b] = size(size(img));
    if b == 3
        grey_img = double(rgb2gray(img));
    else 
         grey_img = double(img);
    end
    

    %%
    %//=======================================================================
    %// Superpixel segmentation
    %//=======================================================================
    %// nC is the target number of superpixels.
    nC = 200;
    %// Call the mex function for superpixel segmentation\
    %// !!! Note that the output label starts from 0 to nC-1.
    t = cputime;

    lambda_prime = 0.5;sigma = 5.0; 
    conn8 = 1; % flag for using 8 connected grid graph (default setting).

    [labels] = mex_ers(double(img),nC);
    %[labels] = mex_ers(double(img),nC,lambda_prime,sigma);
    %[labels] = mex_ers(double(img),nC,lambda_prime,sigma,conn8);
    
    fprintf(1,'Use %f sec. \n',cputime-t);
    fprintf(1,'\t to divide the image into %d superpixels.\n',nC);
    
    [height width] = size(grey_img);
    
    [bmap] = seg2bmap(labels,width,height);
    imshow(bmap)
    
   
    file_path = [file_pre, filename{index}];
    dlmwrite([file_path,'_seg.list'], labels,' ');
    
    seg_min = min(min(labels(:)));
    seg_max = max(max(labels(:)));
    if seg_min ~=0 || seg_max ~=nC -1
        dlmwrite('error.txt',labels);
    end
    
    average = zeros(1,nC);
    number = zeros(1,nC);
    for i = 1:height
        for j=1:width
            tmp_index = int32(labels(i,j))+1;
            if seg_label(i,j) > 127
                average(1,tmp_index) = average(1,tmp_index) + 255;
            else
                average(1,tmp_index) = average(1,tmp_index) + 0;
            end
            number(1,tmp_index) = number(1,tmp_index) + 1;
        end
    end
    
    
    for i = 1:nC
        average(1,i)=average(1,i)/number(1,i);
        if average(1,i) > 127
           average(1,i) = 255;
        else
            average(1,i) = 0;
        end
    end
    dlmwrite([file_path,'_l.list'], average,' ');
end

